import axios from 'axios';

// Constantes
const MATCH_EVENT = "Champions Tour 2025: Americas Stage 1";
const FLAGS = {
    'flag_br': 'üáßüá∑',
    'flag_us': 'üá∫üá∏',
    'flag_ar': 'üá¶üá∑',
    'flag_ca': 'üá®üá¶',
    'flag_mx': 'üá≤üáΩ',
    'flag_cl': 'üá®üá±',
    'flag_co': 'üá®üá¥',
    'flag_pe': 'üáµüá™'
};

// Fun√ß√µes auxiliares
const getFlag = (flagCode) => FLAGS[flagCode] || 'üè≥Ô∏è';

const filterAmericasMatches = (matches, field) =>
    matches.filter(match => match[field] === MATCH_EVENT);

const formatMatchInfo = (match, type) => {
    const flag1 = getFlag(match.flag1);
    const flag2 = getFlag(match.flag2);

    let message = '';

    switch(type) {
        case 'live':
            message = `*${match.team1}* ${flag1} ${match.score1} - ${match.score2} ${flag2} *${match.team2}*\n`;
            message += `üó∫Ô∏è Mapa: ${match.current_map}\n`;
            message += `üìä ${match.match_series}\n`;
            message += `üîó ${match.match_page}\n`;
            break;

        case 'upcoming':
            message = `*${match.team1}* ${flag1} vs ${flag2} *${match.team2}*\n`;
            message += `‚è∞ ${match.time_until_match}\n`;
            message += `üìÖ ${match.match_date}\n`;
            message += `üéØ ${match.match_series}\n`;
            break;

        case 'results':
            message = `*${match.team1}* ${flag1} ${match.score1} - ${match.score2} ${flag2} *${match.team2}*\n`;
            message += `‚è∞ ${match.time_completed}\n`;
            message += `üìä ${match.round_info}\n`;
            break;
    }

    return message;
};

const vctamericasCommand = async (msg) => {
    try {
        // Busca dados das APIs
        const [upcomingResponse, resultsResponse, liveResponse] = await Promise.all([
            axios.get('https://vlrggapi-pmij-ot88qvarw-rehkloos-projects.vercel.app/match?q=upcoming&page=0'),
            axios.get('https://vlrggapi-pmij-ot88qvarw-rehkloos-projects.vercel.app/match?q=results&page=0'),
            axios.get('https://vlrggapi-pmij-ot88qvarw-rehkloos-projects.vercel.app/match?q=live_score&page=0')
        ]);

        // Filtra jogos do VCT Americas
        const americasUpcoming = filterAmericasMatches(upcomingResponse.data.data.segments, 'match_event');
        const americasResults = filterAmericasMatches(resultsResponse.data.data.segments, 'tournament_name');
        const americasLive = filterAmericasMatches(liveResponse.data.data.segments, 'match_event');

        let message = 'üéÆ *VCT AMERICAS - INFORMA√á√ïES* üéÆ\n\n';

        // Adiciona jogos ao vivo
        if (americasLive.length > 0) {
            message += '*üî• JOGOS AO VIVO*\n\n';
            americasLive.forEach(match => {
                message += formatMatchInfo(match, 'live') + '\n';
            });
        }

        // Adiciona pr√≥ximos jogos
        if (americasUpcoming.length > 0) {
            message += '*üìÖ PR√ìXIMOS JOGOS*\n\n';
            americasUpcoming.forEach(match => {
                message += formatMatchInfo(match, 'upcoming') + '\n';
            });
        } else {
            message += '*üìÖ PR√ìXIMOS JOGOS*\n';
            message += '‚ùå N√£o h√° jogos agendados no momento.\n\n';
        }

        // Adiciona √∫ltimos resultados
        if (americasResults.length > 0) {
            message += '*üèÜ √öLTIMOS RESULTADOS*\n\n';
            americasResults.forEach(match => {
                message += formatMatchInfo(match, 'results') + '\n';
            });
        } else {
            message += '*üèÜ √öLTIMOS RESULTADOS*\n';
            message += '‚ùå N√£o h√° resultados recentes.\n\n';
        }

        await msg.reply(message);
    } catch (error) {
        console.error('Erro ao buscar informa√ß√µes do VCT Americas:', error);
        await msg.reply('‚ùå Erro ao buscar informa√ß√µes do VCT Americas. Tente novamente mais tarde.');
    }
};

export default vctamericasCommand;
